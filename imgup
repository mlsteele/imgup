#!/usr/bin/env python
from libmat2 import check_dependencies, UnknownMemberPolicy
from libmat2 import parser_factory, UNSUPPORTED_EXTENSIONS
from pathlib import Path
from typing import List
from typing_extensions import Annotated
import logging
import os
import requests
import shutil
import tempfile
import typer
import xml.etree.ElementTree as ET

IMGUR_CLIENT_ID = 'c9a6efb3d7932fd'


def __print_without_chars(s: str):
    """ Remove control characters
    We might use 'Cc' instead of 'C', but better safe than sorry
    https://www.unicode.org/reports/tr44/#GC_Values_Table
    Copied from https://0xacab.org/jvoisin/mat2/-/blob/master/mat2
    """
    print(''.join(ch for ch in s if not unicodedata.category(ch).startswith('C')))


def __check_file(filename: str, mode: int = os.R_OK) -> bool:
    """ Copied from https://0xacab.org/jvoisin/mat2/-/blob/master/mat2 """
    if not os.path.exists(filename):
        __print_without_chars("[-] %s doesn't exist." % filename)
        return False
    elif not os.path.isfile(filename):
        __print_without_chars("[-] %s is not a regular file." % filename)
        return False
    elif not os.access(filename, mode):
        mode_str: List[str] = list()
        if mode & os.R_OK:
            mode_str += 'readable'
        if mode & os.W_OK:
            mode_str += 'writeable'
        __print_without_chars("[-] %s is not %s." %
                              (filename, 'nor '.join(mode_str)))
        return False
    return True


def clean_meta(filename: str, is_lightweight: bool, inplace: bool, sandbox: bool, policy: UnknownMemberPolicy) -> bool:
    """ Copied from https://0xacab.org/jvoisin/mat2/-/blob/master/mat2 """
    mode = (os.R_OK | os.W_OK) if inplace else os.R_OK
    if not __check_file(filename, mode):
        return False

    try:
        p, mtype = parser_factory.get_parser(filename)  # type: ignore
    except ValueError as e:
        __print_without_chars(
            "[-] something went wrong when cleaning %s: %s" % (filename, e))
        return False
    if p is None:
        __print_without_chars(
            "[-] %s's format (%s) is not supported" % (filename, mtype))
        return False
    p.unknown_member_policy = policy
    p.lightweight_cleaning = is_lightweight
    p.sandbox = sandbox

    try:
        logging.debug('Cleaning %sâ€¦', filename)
        ret = p.remove_all()
        if ret is True:
            shutil.copymode(filename, p.output_filename)
            if inplace is True:
                os.rename(p.output_filename, filename)
        return ret
    except RuntimeError as e:
        __print_without_chars("[-] %s can't be cleaned: %s" % (filename, e))
    return False


def process_and_upload(filepath: str):
    with tempfile.TemporaryDirectory() as tmpdirname:
        ext = os.path.splitext(filepath)[1]
        img_path = os.path.join(tmpdirname, f'img{ext}')
        logging.debug('copying to temp')
        shutil.copy(filepath, img_path)

        # Convert from heic to jpg if necessary
        if ext.casefold() == '.heic':
            logging.debug('converting from heic to jpg')
            from wand.image import Image
            next_img_path = os.path.join(tmpdirname, f'img.jpg')
            with Image(filename=img_path) as img:
                img.format = 'jpg'
                img.save(filename=next_img_path)
            os.unlink(img_path)
            img_path = next_img_path
            ext = '.jpg'

        logging.debug('stripping some exif data for privacy')
        clean_meta(img_path, is_lightweight=False, inplace=True,
                   sandbox=True, policy=UnknownMemberPolicy.ABORT)

        logging.debug('uploading to imgur')
        response = requests.post('https://api.imgur.com/3/image.xml',
                                 headers={
                                     'Authorization': f'Client-ID {IMGUR_CLIENT_ID}'},
                                 files={'image': open(img_path, 'rb')},
                                 data={'Expect': ''})
    imgur_link = ET.fromstring(response.content).find('link').text
    logging.debug(f'got imgur link: {imgur_link}')
    return imgur_link


def from_clipboard():
    logging.debug('grabbing image from clipboard')
    from PIL import ImageGrab, Image
    img = ImageGrab.grabclipboard()
    if img == None:
        raise RuntimeError("no image from clipboard")
    with tempfile.TemporaryDirectory() as tmpdirname:
        img_path = os.path.join(tmpdirname, f'img.{img.format}')
        img.save(img_path)
        return process_and_upload(img_path)


def main(filepaths: Annotated[List[str], typer.Argument()]):
    logging.basicConfig(level=logging.DEBUG)
    if filepaths == ['paste']:
        imgur_links = [from_clipboard()]
    else:
        imgur_links = [process_and_upload(path) for path in filepaths]
    for url in imgur_links:
        print(url)


if __name__ == "__main__":
    typer.run(main)
